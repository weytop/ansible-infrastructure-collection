---
# tasks file for Pyroscope deployment
- name: deploy | Obtain the latest version from the Pyroscope GitHub repo
  when: pyroscope_version == "latest"
  block:
    - name: deploy | Scrape Github API endpoint to obtain latest Pyroscope version
      ansible.builtin.uri:
        url: "https://api.github.com/repos/grafana/pyroscope/releases/latest"
        method: GET
        body_format: json
      become: false
      delegate_to: localhost
      run_once: true
      register: __github_latest_version

    - name: deploy | Latest available Pyroscope version
      ansible.builtin.set_fact:
        pyroscope_version: "{{ __github_latest_version.json.tag_name | regex_replace('^v?(\\d+\\.\\d+\\.\\d+)$', '\\1') }}"

- name: deploy | Verify current deployed version
  block:
    - name: deploy | Check if Pyroscope binary is present
      ansible.builtin.stat:
        path: "/usr/bin/pyroscope"
      register: __already_deployed

    - name: deploy | Obtain current deployed Pyroscope version
      ansible.builtin.command:
        cmd: "/usr/bin/pyroscope --version"
      changed_when: false
      register: __current_deployed_version
      when: __already_deployed.stat.exists | bool

- name: deploy | Include RedHat/Rocky setup
  ansible.builtin.include_tasks:
    file: setup-Redhat.yml
  when: ansible_os_family in ['RedHat', 'Rocky']

- name: deploy | Include Debian/Ubuntu setup
  ansible.builtin.include_tasks:
    file: setup-Debian.yml
  when: ansible_os_family == 'Debian'

- name: deploy | Check if Pyroscope default dir is present
  ansible.builtin.stat:
    path: "/tmp/pyroscope/wal"
  register: __default_structure

- name: deploy | Default structure cleanup
  when: __default_structure.stat.exists | bool
  block:
    - name: deploy | Ensure that Pyroscope is stopped before default cleanup
      ansible.builtin.systemd:
        name: pyroscope.service
        state: stopped

    - name: deploy | Remove default configuration from "/tmp/pyroscope" directory
      ansible.builtin.file:
        path: "/tmp/pyroscope"
        state: absent

- name: deploy | Ensure that Pyroscope working path exists
  ansible.builtin.file:
    path: "{{ pyroscope_working_path }}"
    state: directory
    owner: "pyroscope"
    group: "pyroscope"
    mode: "0755"

- name: deploy | Template Pyroscope config - /etc/pyroscope/config.yml
  ansible.builtin.template:
    src: "config.yml.j2"
    dest: "/etc/pyroscope/config.yml"
    owner: "pyroscope"
    group: "pyroscope"
    mode: "0644"
    validate: "pyroscope -config.verify -config.file=%s"
  notify:
    - Restart pyroscope

- name: deploy | Ensure restart has completed
  ansible.builtin.meta: flush_handlers

- name: deploy | Ensure that Pyroscope is started
  ansible.builtin.systemd:
    name: pyroscope.service
    state: started
    enabled: true

- name: deploy | Verify that Pyroscope URL is responding
  ansible.builtin.uri:
    url: "http://127.0.0.1:{{ pyroscope_http_listen_port }}/ready"
    method: GET
  register: pyroscope_verify_url_status_code
  retries: 5
  delay: 8
  until: pyroscope_verify_url_status_code.status == 200
